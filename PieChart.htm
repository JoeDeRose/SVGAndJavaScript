<style>
    th {
        text-align: left;
    }
    svg {
        display: block;
        margin-top: 5em;
    }
    .inputnumber {
        width: 4em;
    }
    .errormsg {
        padding-left: 0.5em;
        color: red;
        display: none;
    }
    path, circle {
        stroke-width: 1;
        stroke: black;
        fill: none;
    }
    rect {
        stroke-width: 1;
        stroke: black;
    }
    text {
        font-size: 15px;
        font-weight: bold;
    }
    .VS {
        fill: SeaGreen;
    }
    .S {
        fill: MediumAquamarine;
    }
    .D {
        fill: LightCoral;
    }
    .VD {
        fill: FireBrick;
    }
    .DNU {
        fill: DarkGray;
    }
    .U {
        fill: White;
    }
    .TwoCirclesConnector {
        stroke-width: 1;
        stroke: DarkGray;
        stroke-dasharray: 2 2;
    }
</style>

<script src="jquery-min.js"></script>

<form>

    <p>Enter the total number of responses received for the following categories:</p>
    
    <table id="ValueList" >
    </table>
    
    <input id="SubmitButton" type="submit" value="Create URL" >

</form>

<div id="SVGs" >

    <svg id="OneCircle" width="600" height="210" >
    </svg>

    <svg id="TwoCircles" width="900" height="210" >
    </svg>

</div>

<script>
var IncludeDidNotUse = true;
var TotalUsed;
var Total;          // Including Did Not Use

/*
 *  Keys arrays:
    Keys[___][0] = Text Display
    Keys[___][1] = Value
    Keys[___][2] = Value as Percent of Total Who Used the Service
    Keys[___][3] = Value as Percent of Total Replies (including Did Not Use)
 */
var Keys = {
    "VS": [ "Very Satisfied",    0, 0, 0 ],
    "S":  [ "Satisfied",         0, 0, 0 ],
    "D":  [ "Dissatisfied",      0, 0, 0 ],
    "VD": [ "Very Dissatisfied", 0, 0, 0 ]
};
if ( IncludeDidNotUse == true ) {
    Keys["DNU"] = [ "Did Not Use", 0, null, 0 ];
}

var FocusInput = "";
for ( key in Keys ) {
    if ( FocusInput == "" ) {
        FocusInput = key;
    }
    var RowID = "tr_" + key;
    var HeaderID = "th_" + key;
    var CellID = "td_" + key;
    $( "#ValueList" ).append( $( "<tr />", { id: RowID } ) );
    $( "#" + RowID ).append( $( "<th />", { id: HeaderID } ) );
    $( "#" + HeaderID ).append( $( "<label />", { for: key, html: Keys[key][0] } ) );
    $( "#" + RowID ).append( $( "<td />", { id: CellID } ) );
    $( "#" + CellID ).append( $( "<input />", { class: "inputnumber", id: key, name: key, type: "number", value: 0 } ) );
    $( "#" + CellID ).append( $( "<span />", { class: "errormsg", id: "errormsg" + key, html: "Must be a number greater than zero" } ) );
}
$( "#" + FocusInput ).focus();

function AssignVariablesFromQueryStringInURL() {
    var thisURL = window.location.toString();
    var thisQueryString = thisURL;
    // Remove the fragment, if any
    if ( thisURL.indexOf( "#" ) > -1 ) {
        thisQueryString = thisQueryString.split( "#" )[0]
    }
    // Isolate the query string.
    if ( thisQueryString.indexOf( "?" ) > -1 ) {
        var thisQueryString = thisQueryString.split( "?" )[1];
        if ( thisQueryString != "" ) {
            // Create an array of its component argument(s).
            var theseArguments = thisQueryString.split( "&" );
            // Iterate through those arguments and add them to thisQueryStringObject.
            for ( var i = 0; i < theseArguments.length; i++ ) {
                var thisArgumentKeyValue = theseArguments[i].split( "=" );
                var thisArgumentKey = thisArgumentKeyValue[0];
                var thisArgumentValue = thisArgumentKeyValue[1];
/*
                if ( isNaN( parseInt( thisArgumentValue ) ) == false && Keys.hasOwnProperty( thisArgumentKey ) ) {
                    Keys[thisArgumentKey][1] = thisArgumentValue;
                }
*/
                $( "#" + thisArgumentKey ).val( thisArgumentValue );
                DrawSVG();
            }
        }
    }
}

function AssignPercentages() {
    TotalUsed = 0;
    Total = 0;
    for ( key in Keys ) {
        Total = Total + parseFloat( Keys[key][1] );
        if ( key != "DNU" ) {
            TotalUsed = TotalUsed + parseFloat( Keys[key][1] );
        }
    }
    for ( key in Keys ) {
        if ( key != "DNU" ) {
            Keys[key][2] = parseFloat( Keys[key][1] ) / TotalUsed;
        }
        Keys[key][3] = parseFloat( Keys[key][1] ) / Total;
    }
}

function DrawAngle( SVGid, CenterX, CenterY, StartPercent, AnglePercent, Radius, AngleClass, DrawConnectorLines, ConnectLinesToCenterX, ConnectLinesToRadius ) {
    var StartAngle = ( StartPercent ) * 360;
    var StartAngleRad = StartAngle * ( Math.PI / 180 );
    var EndAngle = ( StartPercent + AnglePercent ) * 360;
    var EndAngleRad = EndAngle * ( Math.PI / 180 );
    var StartX = CenterX + Radius * Math.cos( StartAngleRad );
    var StartY = CenterY + Radius * Math.sin( StartAngleRad );
    var EndX = CenterX + Radius * Math.cos( EndAngleRad );
    var EndY = CenterY + Radius * Math.sin( EndAngleRad );
    switch ( AnglePercent ) {
        case 0:
            break;
        case 1:
            $( "#" + SVGid ).append( $( "<circle />", { class: AngleClass, cx: CenterX, cy: CenterY, r: Radius } ) );
            break;
        default:
            var Path = "";
            Path = Path + "M " + CenterX + "," + CenterY;
            Path = Path + " L " + StartX + "," + StartY;
            Path = Path + " A " + Radius + "," + Radius + " 0 " + ( ( AnglePercent < 0.5 ) ? "0" : "1" ) + ",1 " + EndX + "," + EndY;
            Path = Path + " Z";
            $( "#" + SVGid ).append( $( "<path />", { class: AngleClass, d: Path } ) );
            break;
    }
    // See http://stackoverflow.com/questions/3642035/jquerys-append-not-working-with-svg-element for information on why the following is needed.
    if ( DrawConnectorLines == true ) {
        if ( AnglePercent < 0.5 ) {
            Connector1StartX = CenterX;
            Connector1StartY = CenterY - Radius;
            Connector2StartX = CenterX;
            Connector2StartY = CenterY + Radius;
        } else {
            Connector1StartX = EndX;
            Connector1StartY = EndY;
            Connector2StartX = StartX;
            Connector2StartY = StartY;
        }
        Connector1EndX = ConnectLinesToCenterX;
        Connector1EndY = CenterY - ConnectLinesToRadius;
        Connector2EndX = ConnectLinesToCenterX;
        Connector2EndY = CenterY + ConnectLinesToRadius;
        var Connector1Path = "";
        Connector1Path = Connector1Path + "M " + Connector1StartX + "," + Connector1StartY;
        Connector1Path = Connector1Path + " L " + Connector1EndX + "," + Connector1EndY;
        $( "#" + SVGid ).append( $( "<path />", { class: "TwoCirclesConnector", d: Connector1Path } ) );
        var Connector2Path = "";
        Connector2Path = Connector2Path + "M " + Connector2StartX + "," + Connector2StartY;
        Connector2Path = Connector2Path + " L " + Connector2EndX + "," + Connector2EndY;
        $( "#" + SVGid ).append( $( "<path />", { class: "TwoCirclesConnector", d: Connector2Path } ) );
        // $( "#" + SVGid ).append( $( "<circle />", { class: "VS", cx: Connector1StartX, cy: Connector1StartY, r: 10 } ) );
        // $( "#" + SVGid ).append( $( "<circle />", { class: "VD", cx: Connector2StartX, cy: Connector2StartY, r: 10 } ) );
    }
    return StartPercent + AnglePercent;
}

function DrawText( SVGid, X, Y, Text1, Text2, Text3 ) {
    $( "#" + SVGid ).append(
        $(
            "<rect />",
            {
                x: X,
                y: Y - 13,
                width: 15,
                height: 15,
                class: key
            }
        )
    );
    $( "#" + SVGid ).append(
        $(
            "<text />",
            {
                x: X + 25,
                y: Y,
                html: Text1
            }
        )
    );
    $( "#" + SVGid ).append(
        $(
            "<text />",
            {
                x: X + 220,
                y: Y,
                "text-anchor": "end",
                html: Text2
            }
        )
    );
    $( "#" + SVGid ).append(
        $(
            "<text />",
            {
                x: X + 275,
                y: Y,
                "text-anchor": "end",
                html: Text3
            }
        )
    );
    // See http://stackoverflow.com/questions/3642035/jquerys-append-not-working-with-svg-element for information on why the following is needed.
}

function CheckErrorsAndAssignValues() {
    $( ".errormsg" ).hide();
    var hasError = false;
    for ( key in Keys ) {
        var ThisValue = $( "#" + key ).val();
        if ( isNaN( parseFloat( ThisValue ) ) || parseFloat( ThisValue ) < 0 ) {
            $( "#errormsg" + key ).show();
            hasError = true;
            Keys[key][1] = 0;
        } else {
            Keys[key][1] = ThisValue;
        }
    }
    return hasError;
}

function DrawOneCircle() {
    var StartPercent = 0.75;                // Add 0.75 to change 0Â° from the rightmost edge of the circle to the topmost edge of the circle
    var CenterX = 105;
    var CenterY = 105;
    var Radius = 100;
    var SVGid = "OneCircle";
    var Sequence = 0;
    var DrawConnectorLines = false;
    $( "#" + SVGid ).html( "" );
    if ( Total > 0 ) {
        for ( key in Keys ) {
            Sequence++;
            var AnglePercent = Keys[key][3];
            var AngleClass = key;
            StartPercent = DrawAngle( SVGid, CenterX, CenterY, StartPercent, AnglePercent, Radius, AngleClass, DrawConnectorLines, null, null );
            var Text1 = Keys[key][0];
            var Text2 = Keys[key][1] + "/" + Total;
            var Text3 = ( Math.round( Keys[key][3] * 1000 ) / 10 ) + "%";
            var X = CenterX + Radius + 75;
            var Y = CenterY - Radius + 25 + ( ( Sequence - 1 ) * 25 );
            DrawText( SVGid, X, Y, Text1, Text2, Text3 );
        }
    }
}

function DrawTwoCircles() {
    // This logic assumes the circle distinguishing "Did Not Use" from all other responses is smaller than the circle breaking down those other responses.
    // If DNURadius is greater than UsedRadius, the logic for drawing connector lines will give unpredictable results.
    var StartPercent = 0;
    var CenterY = 105;
    var DNUCenterX = 105;
    var DNURadius = 75;
    var SVGid = "TwoCircles";
    var AnglePercent = Keys["DNU"][3];
    var DrawConnectorLines = true;
    var UsedCenterX = 355;
    var UsedRadius = 100;
    $( "#" + SVGid ).html( "" );
    if ( Total > 0 ) {
        $( "#" + SVGid ).append( $( "<circle />", { class: "U", cx: DNUCenterX, cy: CenterY, r: DNURadius } ) );
        DrawAngle( SVGid, DNUCenterX, CenterY, ( StartPercent + 0.5 - ( AnglePercent / 2 ) ), AnglePercent, DNURadius, "DNU", DrawConnectorLines, UsedCenterX, UsedRadius );
        DrawConnectorLines = false;
        var Sequence = 0;
        StartPercent = 0.75;                // Add 0.75 to change 0Â° from the rightmost edge of the circle to the topmost edge of the circle
        if ( TotalUsed == 0 ) {
            $( "#" + SVGid ).append( $( "<circle />", { class: "U", cx: UsedCenterX, cy: CenterY, r: UsedRadius } ) );
        } else {
            for ( key in Keys ) {
                Sequence++;
                if ( key != "DNU" ) {
                    var AnglePercent = Keys[key][2];
                    var AngleClass = key;
                    StartPercent = DrawAngle( SVGid, UsedCenterX, CenterY, StartPercent, AnglePercent, UsedRadius, AngleClass, DrawConnectorLines, null, null );
                }
                var Text1 = Keys[key][0];
                var Text2 = Keys[key][1] + "/" + Total;
                var Text3 = ( Math.round( Keys[key][3] * 1000 ) / 10 ) + "%";
                var X = UsedCenterX + UsedRadius + 75;
                var Y = CenterY - UsedRadius + 25 + ( ( Sequence - 1 ) * 25 );
                DrawText( SVGid, X, Y, Text1, Text2, Text3 );
            }
        }
    }
}

function DrawSVG() {
    var hasError = CheckErrorsAndAssignValues();
    if ( hasError == false ) {
        AssignPercentages();
        DrawOneCircle();
        if ( Keys.hasOwnProperty( "DNU" ) ) {
            DrawTwoCircles();
        }
    }
    $( "#SVGs" ).html( $( "#SVGs" ).html() );
}

$("body").on(
	"change",
	".inputnumber",
	function() {
        if ( isNaN( parseFloat( $(this).val() ) ) ) {
            $(this).val( 0 );
        }
        DrawSVG()
	}
);

AssignVariablesFromQueryStringInURL();
</script>


